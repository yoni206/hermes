<<<<<<< HEAD
In the past quarter, we have focused on several new functionalities of the SMT solver CVC4 that pertain to explainability. These include abduction, interpolation and relevancy analysis for models.

We have developed new techniques for abductive reasoning in CVC4. In abductive reasoning, the goal is to find an assumption that would suffice to failed proof attempt. This can be phrased as a predicate synthesis problem where the goal is to find a formula that is consistent with an existing knowledge base K and together with K entails a goal G. This functionality can be used to explain to a user what facts may have been missing in K that caused the proof of G to fail.

Our approach for abductive reasoning in CVC4 leverages its existing syntax-guided synthesis (SyGuS) capabilities. These techniques are based on enumerating a stream of candidate solutions and caching counterexamples to failed candidates. This is known as counterexample-guided inductive synthesis (CEGIS) and is used in many state-of-the-art synthesis systems. We have developed front-end support in the SMT-LIB language for user-provided abduction queries. This includes support for user-provided context-free grammars for defining the syntactic space of possible solutions to an abduction query.

Additionally, we have worked on increasing the scope and scalability of the approaches for abduction in CVC4. For the former, we have extended the SyGuS solver of CVC4 to reason about inputs uninterpreted functions, which is of particular importance to the queries in the HERMES project. For the latter, we have developed a new algorithm that targets the particular shape of abduction queries and is based on caching unsatisfiable cores for candidate solutions that are found to be inconsistent with the existing knowledge base.

We have also worked on relevancy analysis for model generation in CVC4. The user can now ask CVC4 to provide a subset of the values in a model that were relevant for satisfying the input formula, which we refer to as a "model core". Model cores are useful to a user for generalizing the reasons for why an input formula is satisfiable, which may correspond to a counterexample to a proof obligation.
=======
In the past quarter, we have focused on several new functionalities of the SMT solver CVC4 that pertain to explainability. These include abduction, interpolation and relevancy analysis for models

We have developed new techniques for abductive reasoning in CVC4. In abductive reasoning, the goal is to find an assumption that would suffice to be added to a failed proof attempt. This can be phrased as a predicate synthesis problem where the goal is to find a formula that is consistent with an existing knowledge base K and together with K entails a goal G. This functionality can be used to explain to a user what facts may have been missing in K that caused the proof of G to fail.

Our approach for abductive reasoning in CVC4 leverages its existing syntax-guided synthesis (SyGuS) capabilities. These techniques are based on enumerating a stream of candidate solutions and caching counterexamples to failed candidates. This is known as counterexample-guided inductive synthesis (CEGIS) and is used in many state-of-the-art synthesis systems. We have developed front-end support in the SMT-LIB language for user-provided abduction queries. This includes support for user-provided context-free grammars for defining the syntactic space of possible solutions to an abduction query.

Additionally, we have worked on increasing the scope and scalability of the approaches for abduction in CVC4. For the former, we have extended the SyGuS solver of CVC4 to reason about inputs that include uninterpreted functions, which is of particular importance to the queries in the HERMES project. For the latter, we have developed a new algorithm that targets the particular shape of abduction queries and is based on caching unsatisfiable cores for candidate solutions that are found to be inconsistent with the existing knowledge base.

While abductive reasoning is useful for queries in which the goal G does not follow from the knowledge base K, interpolation is relevant for queries where G follows from K. In such cases, an interpolant I is a formula whose free variables are shared between K and G, follows from K and implies G. From an explainability perspective, interpolants provide insights as for why G follows from K, or, what general property K has that suffices to imply G. Interpolants are also useful for scalability, as crucial building blocks in state-of-the-art model-checking algorithms. Indeed, our initial experiments show that a variant of our SyGuS-based approach for abduction (described above) is also useful for interpolation, and produces a model-checking execution with fewer iterations than other interpolation engines. In the sequel we plan to fully extend the abduction engine for interpolation, and create a front-end support in the SMT-LIB language for interpolation.

We have also worked on relevancy analysis for model generation in CVC4. The user can now ask CVC4 to provide a subset of the values in a model that were relevant for satisfying the input formula, which we refer to as a "model core". Model cores are useful to a user for generalizing the reasons for why an input formula is satisfiable, which may correspond to a counterexample to a proof obligation.

Finally, we have also developed a query-dispatcher that, given an SMT-LIB query, runs several solvers in parallel, and returns the answer of the fastest solver. The solvers are chosen according to the logic in which the query is formalized in, based on SMT-COMP results.
>>>>>>> ff5d6cc4831d6ac3c725896e90b92a69922add93
