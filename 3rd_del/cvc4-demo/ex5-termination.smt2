(set-info :smt-lib-version 2.6)
(set-logic QF_NIA)
(set-option :produce-abducts true)
(set-info :source |
Generated by: Cristina Borralleras, Daniel Larraz, Albert Oliveras, Enric Rodriguez-Carbonell, Albert Rubio
Generated on: 2017-04-27
Generator: VeryMax
Application: Termination proving
Target solver: barcelogic
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "industrial")
(set-info :status sat)
(declare-fun global_invc1_0 () Int)
(declare-fun lam0n0 () Int)
(declare-fun lam0n2 () Int)
(declare-fun lam0n1 () Int)
(declare-fun global_invc1_1 () Int)
(declare-fun lam1n0 () Int)
(declare-fun lam1n2 () Int)
(declare-fun lam1n3 () Int)
(declare-fun lam1n4 () Int)
(declare-fun lam1n1 () Int)
(declare-fun disabled1 () Bool)
(declare-fun non_inc1 () Bool)
(declare-fun lam2n0 () Int)
(declare-fun lam2n2 () Int)
(declare-fun lam2n3 () Int)
(declare-fun lam2n4 () Int)
(declare-fun lam2n1 () Int)
(declare-fun rfc0 () Int)
(declare-fun bounded1 () Bool)
(declare-fun lam3n0 () Int)
(declare-fun lam3n2 () Int)
(declare-fun lam3n3 () Int)
(declare-fun lam3n4 () Int)
(declare-fun lam3n1 () Int)
(declare-fun rfc1 () Int)
(declare-fun dec1 () Bool)
(declare-fun lam4n0 () Int)
(declare-fun lam4n2 () Int)
(declare-fun lam4n3 () Int)
(declare-fun lam4n4 () Int)
(declare-fun lam4n1 () Int)
(declare-fun bnd_and_dec1 () Bool)
(declare-fun GLOBAL_NT_1 () Bool)
(declare-fun global_V0_1 () Int)
(declare-fun ALL_NON_INC_0 () Bool)
(declare-fun DIS_OR_ALL_NON_INC_0 () Bool)
(declare-fun SOME_BND_AND_DEC_0 () Bool)
(declare-fun V0_NIV () Int)
(declare-fun V1_NIV () Int)
(assert ( and ( >= global_invc1_0 ( - 1 ) ) ( <= global_invc1_0 1 ) ( and ( >= lam0n0 0 ) ( <= 0 lam0n2 ) ( < lam0n2 1 ) ( and ( = ( + ( * ( - 1 ) lam0n0 ) ( * lam0n1 2 ) ) ( + global_invc1_1 ( * ( - 1 ) lam0n2 ) ) ) ( = ( * lam0n1 ( - 1 ) ) global_invc1_0 ) ) ) ( and ( >= lam1n0 0 ) ( >= lam1n2 0 ) ( >= lam1n3 0 ) ( <= 0 lam1n4 ) ( < lam1n4 1 ) ( and ( = ( + ( * ( - 1 ) lam1n0 ) ( * lam1n1 2 ) ( * lam1n2 1 ) ( * lam1n3 global_invc1_1 ) ) ( + global_invc1_1 ( * ( - 1 ) lam1n4 ) ) ) ( = ( + ( * lam1n2 ( - 1 ) ) ( * lam1n3 global_invc1_0 ) ) 0 ) ( = ( * lam1n1 ( - 1 ) ) global_invc1_0 ) ) ) ( = disabled1 false ) ( = non_inc1 ( and ( >= lam2n0 0 ) ( >= lam2n2 0 ) ( >= lam2n3 0 ) ( <= 0 lam2n4 ) ( < lam2n4 1 ) ( and ( = ( + ( * ( - 1 ) lam2n0 ) ( * lam2n1 2 ) ( * lam2n2 1 ) ( * lam2n3 global_invc1_1 ) ) ( + 0 ( * ( - 1 ) lam2n4 ) ) ) ( = ( + ( * lam2n2 ( - 1 ) ) ( * lam2n3 global_invc1_0 ) ) ( * ( - 1 ) rfc0 ) ) ( = ( * lam2n1 ( - 1 ) ) rfc0 ) ) ) ) ( = bounded1 ( and ( >= lam3n0 0 ) ( >= lam3n2 0 ) ( >= lam3n3 0 ) ( <= 0 lam3n4 ) ( < lam3n4 1 ) ( and ( = ( + ( * ( - 1 ) lam3n0 ) ( * lam3n1 2 ) ( * lam3n2 1 ) ( * lam3n3 global_invc1_1 ) ) ( + ( * ( - 1 ) rfc1 ) ( * ( - 1 ) lam3n4 ) ) ) ( = ( + ( * lam3n2 ( - 1 ) ) ( * lam3n3 global_invc1_0 ) ) ( * ( - 1 ) rfc0 ) ) ( = ( * lam3n1 ( - 1 ) ) 0 ) ) ) ) ( = dec1 ( and ( >= lam4n0 0 ) ( >= lam4n2 0 ) ( >= lam4n3 0 ) ( <= 0 lam4n4 ) ( < lam4n4 1 ) ( and ( = ( + ( * ( - 1 ) lam4n0 ) ( * lam4n1 2 ) ( * lam4n2 1 ) ( * lam4n3 global_invc1_1 ) ) ( + 1 ( * ( - 1 ) lam4n4 ) ) ) ( = ( + ( * lam4n2 ( - 1 ) ) ( * lam4n3 global_invc1_0 ) ) ( * ( - 1 ) rfc0 ) ) ( = ( * lam4n1 ( - 1 ) ) rfc0 ) ) ) ) ( = bnd_and_dec1 ( and bounded1 dec1 ) ) ( = GLOBAL_NT_1 ( not ( = global_invc1_0 0 ) ) ) ( or ( and ( not ( <= ( + global_invc1_1 ( * global_invc1_0 global_V0_1 ) ) 0 ) ) ( <= ( + ( * ( - 1 ) global_V0_1 ) 1 ) 0 ) ) ( = global_invc1_0 0 ) ) ( = ALL_NON_INC_0 non_inc1 ) ( = DIS_OR_ALL_NON_INC_0 ( or disabled1 ALL_NON_INC_0 ) ) ( = SOME_BND_AND_DEC_0 bnd_and_dec1 ) ( or ( not ALL_NON_INC_0 ) ( and ( >= rfc0 ( - 2 ) ) ( <= rfc0 2 ) ( not ( = rfc0 0 ) ) ( >= rfc1 0 ) ( or SOME_BND_AND_DEC_0 ( <= ( + ( * rfc0 V0_NIV ) 1 ) ( * rfc0 V1_NIV ) ) ) ) ) ))
(get-abduct A (not (or GLOBAL_NT_1 ALL_NON_INC_0)))
